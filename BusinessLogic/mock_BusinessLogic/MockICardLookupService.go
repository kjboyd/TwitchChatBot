// Code generated by MockGen. DO NOT EDIT.
// Source: .\BusinessLogic\CardLookupService.go

// Package mock_BusinessLogic is a generated GoMock package.
package mock_BusinessLogic

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICardLookupService is a mock of ICardLookupService interface.
type MockICardLookupService struct {
	ctrl     *gomock.Controller
	recorder *MockICardLookupServiceMockRecorder
}

// MockICardLookupServiceMockRecorder is the mock recorder for MockICardLookupService.
type MockICardLookupServiceMockRecorder struct {
	mock *MockICardLookupService
}

// NewMockICardLookupService creates a new mock instance.
func NewMockICardLookupService(ctrl *gomock.Controller) *MockICardLookupService {
	mock := &MockICardLookupService{ctrl: ctrl}
	mock.recorder = &MockICardLookupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICardLookupService) EXPECT() *MockICardLookupServiceMockRecorder {
	return m.recorder
}

// LookupCardAndPost mocks base method.
func (m *MockICardLookupService) LookupCardAndPost(cardName string, writer io.StringWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LookupCardAndPost", cardName, writer)
}

// LookupCardAndPost indicates an expected call of LookupCardAndPost.
func (mr *MockICardLookupServiceMockRecorder) LookupCardAndPost(cardName, writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCardAndPost", reflect.TypeOf((*MockICardLookupService)(nil).LookupCardAndPost), cardName, writer)
}
